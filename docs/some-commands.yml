- Quando um microsserviço é criado, deve conseguir pedir para o event bus todos os eventos ja processados para poder se atualizar

Docker
	- Conseguir criar cópias do seu serviço
	- Conseguir iniciar e parar cópias do serviço em momentos específicos do dia
	- docker run [image_name] === docker create [image_name] + docker start [image_name] 
	- docker ps
	- docker ps --all
	- docker run [image_name] -a  -> -a = attach
	- docker system prune -> delete all the resources from docker
    - docker system
	- docker system df -> disk usage
	- docker system info
	- docker system events -> se real time events
	- docker logs [containerId]
	- docker stop [container_id] -> give time to your container to finish its process (cleanup, save stuff)
	- docker kill [container_id] -> shut down right now!
	- docker exec -it [container_id] [command] -> -it = interact
		- Can be used with a container that is running other process
		- exec -> execute an additional command in the conainer
		- it can be used separated
			-i -> make possible to you send input data to the container
			-t -> make possible to you receive some additional data from the container
	- docker build .
		- build or update an image  
	- docker build -t [yourdockerid]/image-name:version .
		- -t -> create a tag with its name
	- docker commit -c 'CMD ["startup command"]' [running_container_id]
		- -c -> allows specify the start command 
	- docker run -p 8080:8080 [image_id]
		- -p -> port mapping [local_machine_port]:[container_port]
	- docker container rm $(docker container ls –aq)
	- docker stats [--no-stream] ->> show docker stats (memory usage, CPU,...)
    - docker search [image-name]
	- docker image history [image:tag]
	- docker image inspect [image-id]
	- docker container pause [container-id]
	- docker container unpause [container-id]
	- docker run --link [other-container-name] .... -> --link -> make one container see another one (network connection shortcut that works in bridge network)
	- docker run --env [ENV_NAME=value] .... -> set an environment variable
	- docker run --network=[network-name] .... -> set the network to the container
	- docker network create [network-name]
		
Docker file
	- FROM
		- Specify the base image
	
	- WORKDIR [specified/folder]                                          
		- change the context of your container to the specified folder

	- COPY [./local/folder] [./container/folder]
		- copy the specified file to the container and save a new temporary image with the previous image and this or these new files 
		- this command is relative to the current build context
		
	- RUN [the command]
		- Run a command inside the base image and save all the file system as a temporary image
	
	- CMD ["command", "to", "run"]
		- Get the command and save it as the start container command 
		
Kubernetes
	- kubectl -> comando utilizado para interagir como kubernetes
	- kubectl apply -f file.yaml
	- kubectl get pods -> verifica os pods criados
	- kubectl exec -it [pod_name] [cmd]
	- kubectl logs [pod_name]
	- kubectl delete pod [pod_name]
	- kubectl apply -f [config file name] -> avisa o kubernetes para rodar a configuração
	- kubectl describe pod [pod_name] -> apresenta algumas informações sobre o Pod
	- kubectl exec -it [pod_name] sh -> abrir shell 
		-  exit -> sair
	- kubectl get deployments -> list all the deployments
	- kubectl describe deployment [depl name] -> 
	- kubectl apply -f [config file name] ->
	- kubectl delete deployment [depl_name] -> 
	- kubectl rollout restart deployment [depl_name]
	- kubectl apply -f . -> aplica todos os arquivos yaml dentro da pasta
	- kubectl create secret generic [secret-name] --from-literal=[key]=[value]
	- kubectl describe pod [pod name]
	- kubectl get namespace
	- kubectl get services -n [namespace]
	- kubectl port-forward [pod name] localPort:podPort -> Mapeia uma porta da maquina com uma porta do pod
	- kubectl port-forward svc/[service name] 27017:27017 -> Mapeia uma porta da maquina com uma porta do service 
	- kubectl config view
	- kubectl config use-context [kubernetes-config-name]
	
host file: C:\Windows\System32\drivers\etc\host

gcloud
	- gcloud init
	- gcloud components install kubectl
	- gcloud container clusters get-credentials [cluster name]
	
Digital Ocean:
	- doctl auth init
	- doctl kubernetes cluster kubeconfig save [cluster_name]
	
npm
	- npm login
	- npm publish --access public
	- npm version patch -> increment patch version (1.0.0 -> 1.0.1)
	
npx
	- create-react-app web --template=typescript
	
skaffold
	skaffold dev
	
Kubernetes file	
	- apiVersion: v1 -> A versão do Kubernetes que contém o objeto customizado que vou criar
	kind: Pod -> Tipo do objeto que vou criar (Pod no caso)
	metadata: -> são as configurações do objeto que vou criar
		name: nome_do_objeto -> nome do objeto que vou criar(No caso, nome do Pod)
	spec: -> os stributos que quiser adicionar no objeto que será criado
		containers: -> containers que vão estar dentro do pod
			- name: nome_do_container -> nome do containter
			image: minha_imagem:version -> nome da imagem
			

serverless framework:
	sls invoke -f [function-name] --logger
		-f -> define function-name
	sls invoke local -f [function-name] --logger	
		- local -> execute local
	sls deploy
	